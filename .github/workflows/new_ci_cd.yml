name: Flask CI/CD

on:
  push:
    branches:
      - staging
  release:
    types: [created]
  
  workflow_dispatch:

env:
  APP_NAME: student-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: echo "ANKIT_MONGO_URI=${{ secrets.ANKIT_MONGO_URI }}" >> $GITHUB_ENV

      - name: Run tests
        run: pytest test_app.py

  deploy-staging:
    #needs: test
    #if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "."
          target: "~/flaskapp-staging"

      - name: SSH and Restart Docker (Staging)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/flaskapp-staging
            echo "ANKIT_MONGO_URI=${{ secrets.ANKIT_MONGO_URI }}" > .env
            # sudo docker stop flask-container || true
            # sudo docker rm flask-container || true
            # sudo docker build -t flask-staging .
            # sudo docker pull ankit200193/gitactions:01
            # sudo docker run -d --name flask-container -p 5000:5000 --env-file .env ankit200193/gitactions:01

            # Stop the container if it's running
            if [ "$(sudo docker ps -q -f name=flask-container)" ]; then
              echo "Stopping flask-container..."
              sudo docker stop flask-container
            fi
            
            # Start the container if it exists and is not running
            if [ "$(sudo docker ps -aq -f name=flask-container)" ]; then
              echo "Starting existing flask-container..."
              sudo docker start flask-container
            else
              echo "flask-container does not exist, creating and starting a new one..."
              sudo docker pull ankit200193/gitactions:01
              sudo docker run -d --name flask-container -p 5000:5000 --env-file .env ankit200193/gitactions:01
            fi


  deploy-production:
    #needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "."
          target: "~/flaskapp-prod"

      - name: SSH and Restart Docker (Prod)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/flaskapp-prod
            echo "ANKIT_MONGO_URI=${{ secrets.ANKIT_MONGO_URI }}" > .env
            sudo docker stop flask-container || true
            sudo docker rm flask-container || true
            # sudo docker build -t flask-staging .
            sudo docker pull ankit200193/gitactions:01
            sudo docker run -d --name flask-container -p 5000:5000 --env-file .env ankit200193/gitactions:01
